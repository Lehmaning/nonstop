#!/usr/bin/env -S node
/**
 * @file A sandbox which is only for testing redirect rules.
 * @author Lehmaning <60032845+Lehmaning@users.noreply.github.com>
 * @license MIT
 */
let fs = require("fs");
let path = require("path");

let args = process.argv.slice(2)
if(args[0] in {"-h":"", "--help":"", "help":""}) {
    console.log(`
Usage: sandbox desktop/mobile sourceURL
    `)
    process.exit()
}

let ruleName = args[0] + ".thin.json";
let ruleLocation = path.resolve(__dirname + "/../" + ruleName)
let ruleFile = fs.readFileSync(ruleLocation).toString();
let data = JSON.parse(ruleFile);
let testURL = args[1];

/**
 * Read every redirect rules.
 * @yields {string} Every element from redirect rules.
 */
function* getRule(data){
    for(let r of data["redirect-rules"]) {
        yield r;
    }
}

/**
 * Iterate every rules then output if matched.
 * @function test
 * @param {string} input The econd param from stdi, a URL pattern.
 */
function test(input) {
    let resultURL = input, beforeURL;
    let matched = false
    for(let rule of getRule(data)) {
        let srcURL = new RegExp(rule["kind"] == "wildcard" 
            ? rule["src"].replace("\.", "\\.").replace("*", ".*").replace("/", "\\/")
            : rule["src"]);
        let dstURL = rule["dst"];
        beforeURL = resultURL;
        resultURL = beforeURL.replace(srcURL, dstURL);
        if(resultURL == beforeURL) continue;
        console.log("Matched", rule["kind"], "rule:\n", rule["src"].toString(), "->", dstURL);
        /* console.log("\n" + srcURL.toString(), "->", dstURL); */
        console.log("The result URL is:", resultURL);
        matched = true
    }
    if(!matched) console.log("No rule matched!");
}

test(testURL);
